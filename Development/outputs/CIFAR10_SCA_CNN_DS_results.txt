SCA-CNN-DS - Accuracy on the 10,000 test images: 62.17%
Ablated SCA-CNN-DS - Accuracy on the 10,000 test images: 14.58%
SCA-CNN-DS - Final Training loss: 0.953182578086853
SCA-CNN-DS - Total trainable parameters: 1144766

ContextNN - Accuracy on the 10,000 test images: 44.96%
ContextNN - Total trainable parameters: 8786

ContextNN(
  (reduce1): Conv2d(3, 4, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (reduce2): Conv2d(4, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (fc_context): Sequential(
    (0): Flatten(start_dim=1, end_dim=-1)
    (1): Linear(in_features=512, out_features=16, bias=True)
  )
  (out): Linear(in_features=16, out_features=10, bias=True)
)

SCACNN(
  (context): ContextNN(
    (reduce1): Conv2d(3, 4, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (reduce2): Conv2d(4, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (fc_context): Sequential(
      (0): Flatten(start_dim=1, end_dim=-1)
      (1): Linear(in_features=512, out_features=16, bias=True)
    )
    (out): Linear(in_features=16, out_features=10, bias=True)
  )
  (scaconvs1): ModuleList(
    (0): SCAConv_DS(
      (unfold_D): Unfold(kernel_size=(3, 3), dilation=1, padding=(1, 1), stride=(1, 1))
      (mlp_D): Sequential(
        (0): Linear(in_features=20, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=9, bias=True)
      )
      (mlp_P): Sequential(
        (0): Linear(in_features=20, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=48, bias=True)
      )
    )
    (1): SCAConv_DS(
      (unfold_D): Unfold(kernel_size=(3, 3), dilation=1, padding=(1, 1), stride=(1, 1))
      (mlp_D): Sequential(
        (0): Linear(in_features=20, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=9, bias=True)
      )
      (mlp_P): Sequential(
        (0): Linear(in_features=20, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=1024, bias=True)
      )
    )
    (2): SCAConv_DS(
      (unfold_D): Unfold(kernel_size=(3, 3), dilation=1, padding=(1, 1), stride=(1, 1))
      (mlp_D): Sequential(
        (0): Linear(in_features=20, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=9, bias=True)
      )
      (mlp_P): Sequential(
        (0): Linear(in_features=20, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=4096, bias=True)
      )
    )
  )
  (scaconvs2): ModuleList(
    (0): SCAConv_DS(
      (unfold_D): Unfold(kernel_size=(3, 3), dilation=1, padding=(1, 1), stride=(2, 2))
      (mlp_D): Sequential(
        (0): Linear(in_features=20, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=9, bias=True)
      )
      (mlp_P): Sequential(
        (0): Linear(in_features=20, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=512, bias=True)
      )
    )
    (1): SCAConv_DS(
      (unfold_D): Unfold(kernel_size=(3, 3), dilation=1, padding=(1, 1), stride=(2, 2))
      (mlp_D): Sequential(
        (0): Linear(in_features=20, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=9, bias=True)
      )
      (mlp_P): Sequential(
        (0): Linear(in_features=20, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=2048, bias=True)
      )
    )
    (2): SCAConv_DS(
      (unfold_D): Unfold(kernel_size=(3, 3), dilation=1, padding=(1, 1), stride=(2, 2))
      (mlp_D): Sequential(
        (0): Linear(in_features=20, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=9, bias=True)
      )
      (mlp_P): Sequential(
        (0): Linear(in_features=20, out_features=32, bias=True)
        (1): ReLU()
        (2): Linear(in_features=32, out_features=8192, bias=True)
      )
    )
  )
  (norms): ModuleList(
    (0): LayerNorm((16, 32, 32), eps=1e-05, elementwise_affine=True)
    (1): LayerNorm((32, 16, 16), eps=1e-05, elementwise_affine=True)
    (2): LayerNorm((64, 8, 8), eps=1e-05, elementwise_affine=True)
  )
  (relu): ReLU()
  (fc_out): Sequential(
    (0): Flatten(start_dim=1, end_dim=-1)
    (1): Linear(in_features=2048, out_features=256, bias=True)
    (2): ReLU()
    (3): Linear(in_features=256, out_features=10, bias=True)
  )
)

